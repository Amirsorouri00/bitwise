struct int2 {
    x, y: int;
}

func int2_eq(a: int2, b: int2): bool {
    return a.x == b.x && a.y == b.y;
}

struct DigitalButton {
    down: bool;
    pressed: int;
    released: int;
}

func reset_digital_button_events(button: DigitalButton*) {
    button.pressed = 0;
    button.released = 0;
}

func update_digital_button(button: DigitalButton*, down: bool) {
    was_down := button.down;
    button.down = down;
    button.pressed += down && !was_down;
    button.released += !down && was_down;
}

const KEY_LSHIFT = 256;
const KEY_RSHIFT = 257;
const KEY_SHIFT = 258;
const KEY_LCTRL = 259;
const KEY_RCTRL = 260;
const KEY_CTRL = 261;
const KEY_LALT = 262;
const KEY_RALT = 263;
const KEY_ALT = 264;
const KEY_CAPS = 265;
const KEY_RETURN = 266;
const KEY_SPACE = 267;
const KEY_BACKSPACE = 268;
const KEY_ESCAPE = 269;
const KEY_TAB = 270;
const KEY_LEFT = 271;
const KEY_RIGHT = 272;
const KEY_UP = 273;
const KEY_DOWN = 274;

const NUM_KEYS = KEY_DOWN + 1;

const MAX_TEXT = 1024;
const MAX_ERROR = 256;
const MAX_TITLE = 256;

struct Time {
    delta_ticks: int;
    delta_nsecs: int;
    delta_usecs: int;
    delta_msecs: int;
    delta_secs: float;
    
    ticks: uint64;
    nsecs: uint64;
    usecs: uint64;
    msecs: uint64;
    secs: double;

    ticks_per_sec: uint64;

    sdl_start_ticks: uint64;
}

struct Mouse {
    moved: bool;
    pos: int2;
    delta_pos: int2;

    global_moved: bool;
    global_pos: int2;
    global_delta_pos: int2;

    left_button: DigitalButton;
    middle_button: DigitalButton;
    right_button: DigitalButton;
    capture: bool;

    synced_capture: bool;
    synced_pos: int2;
    synced_global_pos: int2;
}

struct SDL_Window;

struct Window {
    resizable: bool;
    hidden: bool;

    title: char const*;
    pos: int2;
    size: int2;
    moved: bool;
    resized: bool;
    
    synced_title: char[MAX_TITLE];
    synced_pos: int2;
    synced_size: int2;
    synced_resizable: bool;
    synced_hidden: bool;

    sdl: SDL_Window*;
}

struct Display {
    size: int2;
    rate: int;
    dpi: float;
}

struct App {
    init: bool;
    quit: bool;
    num_updates: int;
    error: char const*;
    error_buf: char[MAX_ERROR];
    
    clipboard: char const*;

    display: Display;

    window: Window;
    keys: DigitalButton[NUM_KEYS];
    mouse: Mouse;
    text: char[MAX_TEXT];
    time: Time;

    synced_clipboard: char*;
}

var default_window_title = "Noir";
var default_window_size = int2{800, 600};

const DEFAULT_WINDOW_POS = 1 << 31;

var app: App = {window = {pos = {DEFAULT_WINDOW_POS , DEFAULT_WINDOW_POS}}};

func update_combination_key(dest_key: int, src_key1: int, src_key2: int) {
    update_digital_button(&app.keys[dest_key], app.keys[src_key1].down || app.keys[src_key2].down);
}

func update_combination_keys() {
    update_combination_key(KEY_SHIFT, KEY_LSHIFT, KEY_RSHIFT);
    update_combination_key(KEY_CTRL, KEY_LCTRL, KEY_RCTRL);
    update_combination_key(KEY_ALT, KEY_LALT, KEY_RALT);
}

func init(): bool;

func update(): bool;

// Test program

#foreign(include = "<stdio.h>")

@foreign
func printf(fmt: char const*, ...): int;

@foreign
func sprintf(dest: char*, fmt: char const*, ...): int;

func print_and_clear_error() {
    if (app.error) {
        printf("Error: %s\n", app.error);
        app.error = NULL;
    }
}

var full_screen: bool;
var saved_window_pos: int2;
var saved_window_size: int2;

func toggle_full_screen() {
    if (full_screen) {
        app.window.pos = saved_window_pos;
        app.window.size = saved_window_size;
    } else {
        saved_window_pos = app.window.pos;
        saved_window_size = app.window.size;
        app.window.pos = {};
        app.window.size = app.display.size;
    }
    full_screen = !full_screen;
}

func main(argc: int, argv: char**): int {
    title_count := 0;
    title_buf: char[16];
    show_time_msecs: uint64 = 0;
    if (!init()) {
        print_and_clear_error();
        return 1;
    }
    printf("Display: %d x %d, %d Hz, %.2f DPI\n", app.display.size.x, app.display.size.y, app.display.rate, app.display.dpi);
    while (update()) {
        if (app.error) {
            print_and_clear_error();
        }
        // printf("Mouse = (%d, %d)\n", app.mouse.pos.x, app.mouse.pos.y);
        // printf("Time: %fs\n", app.time.secs);
        // printf("Delta time: %fs\n", app.time.delta_secs);
        if (app.mouse.moved) {
            printf("Mouse move: (%d, %d)\n", app.mouse.delta_pos.x, app.mouse.delta_pos.y);
        }
        if (app.mouse.global_moved) {
            printf("Global mouse move: (%d, %d)\n", app.mouse.global_delta_pos.x, app.mouse.global_delta_pos.y);
        }
        if (app.window.moved) {
            printf("Window moved: (%d, %d)\n", app.window.pos.x, app.window.pos.y);
        }
        if (app.window.resized) {
            printf("Window resized: (%d, %d)\n", app.window.size.x, app.window.size.y);
        }
        if (*app.text) {
            printf("Text: %s\n", app.text);
        }
        if (app.mouse.left_button.pressed) {
            printf("Left mouse button pressed\n");
        }
        if (app.mouse.left_button.released) {
            printf("Left mouse button released\n");
        }
        if (app.keys[KEY_ESCAPE].pressed) {
            app.quit = true;
        }
        if (app.keys[KEY_ALT].down && app.keys[KEY_RETURN].pressed) {
            printf("Enabling borderless full screen\n");
            toggle_full_screen();
        }
        if (app.keys['t'].pressed) {
            printf("Changing title\n");
            title_count++;
            sprintf(title_buf, "Title %d", title_count);
            app.window.title = title_buf;
        }
        if (app.keys['a'].pressed) {
            printf("Copying title to clipboard\n");
            app.clipboard = app.window.title;
        }
        if (app.keys['b'].pressed) {
            printf("Copying clipboard to title\n");
            app.window.title = app.clipboard;
        }
        if (app.keys['c'].pressed) {
            app.mouse.capture = !app.mouse.capture;
            printf("Mouse capture %s\n", app.mouse.capture ? "enabled" : "disabled");
        }
        if (app.keys['r'].pressed) {
            app.window.resizable = !app.window.resizable;
            printf("Window resizing %s\n", app.window.resizable ? "enabled" : "disabled");
        }
        if (app.keys['h'].pressed) {
            app.window.hidden = true;
            show_time_msecs = app.time.msecs + 1000;
            printf("Window hidden\n");
        }
        if (app.window.hidden && app.time.msecs >= show_time_msecs) {
            app.window.hidden = false;
            printf("Window shown\n");
        }
        dest := &app.window.pos;
        if (app.keys[KEY_SHIFT].down) {
            dest = &app.mouse.global_pos;
        } else if (app.keys[KEY_CTRL].down) {
            dest = &app.window.size;
        }
        if (app.keys[KEY_LEFT].pressed) {
            dest.x -= 100;
        }
        if (app.keys[KEY_RIGHT].pressed) {
            dest.x += 100;
        }
        if (app.keys[KEY_UP].pressed) {
            dest.y -= 100;
        }
        if (app.keys[KEY_DOWN].pressed) {
            dest.y += 100;
        }
        lshift := app.keys[KEY_LSHIFT];
        if (lshift.pressed) {
            printf("Left shift pressed\n");
        }
        if (lshift.released) {
            printf("Left shift released\n");
        }
        rshift := app.keys[KEY_RSHIFT];
        if (rshift.pressed) {
            printf("Right shift pressed\n");
        }
        if (rshift.released) {
            printf("Right shift released\n");
        }
        shift := app.keys[KEY_SHIFT];
        if (shift.pressed) {
            printf("Shift pressed\n");
        }
        if (shift.released) {
            printf("Shift released\n");
        }
    }
    if (app.error) {
        print_and_clear_error();
    }
    return 0;
}
