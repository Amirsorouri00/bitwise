struct int2 {
    x, y: int;
}

struct DigitalButton {
    down: bool;
    pressed: int;
    released: int;
}

func reset_digital_button_events(button: DigitalButton*) {
    button.pressed = 0;
    button.released = 0;
}

func update_digital_button(button: DigitalButton*, down: bool) {
    was_down := button.down;
    button.down = down;
    button.pressed += down && !was_down;
    button.released += !down && was_down;
}

func update_combination_key(dest_key: int, src_key1: int, src_key2: int) {
    update_digital_button(&noir.keys[dest_key], noir.keys[src_key1].down || noir.keys[src_key2].down);
}

func update_combination_keys() {
    update_combination_key(KEY_SHIFT, KEY_LSHIFT, KEY_RSHIFT);
    update_combination_key(KEY_CTRL, KEY_LCTRL, KEY_RCTRL);
    update_combination_key(KEY_ALT, KEY_LALT, KEY_RALT);
}

const KEY_LSHIFT = 256;
const KEY_RSHIFT = 257;
const KEY_SHIFT = 258;
const KEY_LCTRL = 259;
const KEY_RCTRL = 260;
const KEY_CTRL = 261;
const KEY_LALT = 262;
const KEY_RALT = 263;
const KEY_ALT = 264;
const KEY_CAPS = 265;
const KEY_RETURN = 266;
const KEY_SPACE = 267;
const KEY_BACKSPACE = 268;
const KEY_ESCAPE = 269;
const KEY_TAB = 270;
const KEY_LEFT = 271;
const KEY_RIGHT = 272;
const KEY_UP = 273;
const KEY_DOWN = 274;

const NUM_KEYS = KEY_DOWN + 1;

const MAX_TEXT = 1024;

struct Time {
    delta_ticks: int;
    delta_nsecs: int;
    delta_usecs: int;
    delta_msecs: int;
    delta_secs: float;
    
    ticks: uint64;
    nsecs: uint64;
    usecs: uint64;
    msecs: uint64;
    secs: double;

    ticks_per_sec: uint64;

    sdl_start_ticks: uint64;
}

struct Mouse {
    moved: bool;
    pos: int2;
    delta_pos: int2;

    global_moved: bool;
    global_pos: int2;
    global_delta_pos: int2;

    left_button: DigitalButton;
    middle_button: DigitalButton;
    right_button: DigitalButton;
    captured: bool;

    synced_captured: bool;
    synced_pos: int2;
    synced_global_pos: int2;
}

struct SDL_Window;

struct Window {
    resizable: bool;
    hidden: bool;

    title: char const*;
    pos: int2;
    size: int2;
    moved: bool;
    resized: bool;

    synced_pos: int2;
    synced_size: int2;
    synced_resizable: bool;
    synced_hidden: bool;

    sdl_window: SDL_Window*;
}

struct Noir {
    init: bool;
    quit: bool;
    num_updates: int;
    error: char const*;

    window: Window;
    keys: DigitalButton[NUM_KEYS];
    mouse: Mouse;
    text: char[MAX_TEXT];
    time: Time;
}

var default_window_title = "Noir";
var default_window_size = int2{800, 600};

const DEFAULT_WINDOW_POS = 1000000;

var noir: Noir = {window = {pos = {DEFAULT_WINDOW_POS , DEFAULT_WINDOW_POS}}};

func init(): bool;
func update(): bool;

// Test program

#foreign(include = "<stdio.h>")

@foreign
func printf(fmt: char const*, ...): int;

func main(argc: int, argv: char**): int {
    init();
    show_time_msecs: uint64 = 0;
    while (update()) {
        if (noir.error) {
            printf("Error: %s\n", noir.error);
            noir.error = NULL;
        }
        // printf("Mouse = (%d, %d)\n", noir.mouse.pos.x, noir.mouse.pos.y);
        // printf("Time: %fs\n", noir.time.secs);
        // printf("Delta time: %fs\n", noir.time.delta_secs);
        if (noir.mouse.moved) {
            printf("Mouse move: (%d, %d)\n", noir.mouse.delta_pos.x, noir.mouse.delta_pos.y);
        }
        if (noir.mouse.global_moved) {
            printf("Global mouse move: (%d, %d)\n", noir.mouse.global_delta_pos.x, noir.mouse.global_delta_pos.y);
        }
        if (noir.window.moved) {
            printf("Window moved: (%d, %d)\n", noir.window.pos.x, noir.window.pos.y);
        }
        if (noir.window.resized) {
            printf("Window resized: (%d, %d)\n", noir.window.size.x, noir.window.size.y);
        }
        if (*noir.text) {
            printf("Text: %s\n", noir.text);
        }
        if (noir.mouse.left_button.pressed) {
            printf("Left mouse button pressed\n");
        }
        if (noir.mouse.left_button.released) {
            printf("Left mouse button released\n");
        }
        if (noir.keys[KEY_ESCAPE].pressed) {
            noir.quit = true;
        }
        if (noir.keys['a'].pressed) {
            noir.mouse.captured = !noir.mouse.captured;
            printf("Mouse capture %s\n", noir.mouse.captured ? "enabled" : "disabled");
        }
        if (noir.keys['r'].pressed) {
            noir.window.resizable = !noir.window.resizable;
            printf("Window %s\n", noir.window.resizable ? "resizable" : "non-resizable");
        }
        if (noir.keys['h'].pressed) {
            noir.window.hidden = true;
            show_time_msecs = noir.time.msecs + 1000;
            printf("Window hidden\n");
        }
        if (noir.window.hidden && noir.time.msecs >= show_time_msecs) {
            noir.window.hidden = false;
            printf("Window shown\n");
        }
        dest := &noir.window.pos;
        if (noir.keys[KEY_SHIFT].down) {
            dest = &noir.mouse.global_pos;
        } else if (noir.keys[KEY_CTRL].down) {
            dest = &noir.window.size;
        }
        if (noir.keys[KEY_LEFT].pressed) {
            dest.x -= 100;
        }
        if (noir.keys[KEY_RIGHT].pressed) {
            dest.x += 100;
        }
        if (noir.keys[KEY_UP].pressed) {
            dest.y -= 100;
        }
        if (noir.keys[KEY_DOWN].pressed) {
            dest.y += 100;
        }
        return_key := noir.keys[KEY_RETURN];
        if (return_key.pressed) {
            printf("Return key pressed\n");
        }
        if (return_key.released) {
            printf("Return key released\n");
        }
        lshift := noir.keys[KEY_LSHIFT];
        if (lshift.pressed) {
            printf("Left shift pressed\n");
        }
        if (lshift.released) {
            printf("Left shift released\n");
        }
        rshift := noir.keys[KEY_RSHIFT];
        if (rshift.pressed) {
            printf("Right shift pressed\n");
        }
        if (rshift.released) {
            printf("Right shift released\n");
        }
        shift := noir.keys[KEY_SHIFT];
        if (shift.pressed) {
            printf("Shift pressed\n");
        }
        if (shift.released) {
            printf("Shift released\n");
        }
    }
    return 0;
}
